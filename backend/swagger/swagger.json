{
  "swagger": "2.0",
  "info": {
    "title": "Project Management system",
    "description": "Documentation for various APIs in the project",
    "version": "1.0.0"
  },
  "paths": {
    "/api/auth/login": {
      "post": {
        "summary": "Login user",
        "description": "Logs in a user with the provided email and password.",
        "tags": ["Authentication"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "User login details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "Email address of the user"
                },
                "password": {
                  "type": "string",
                  "description": "Password for the user account"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Success message"
                },
                "token": {
                  "type": "string",
                  "description": "JWT token for authentication"
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier of the user"
                    },
                    "firstName": {
                      "type": "string",
                      "description": "First name of the user"
                    },
                    "lastName": {
                      "type": "string",
                      "description": "Last name of the user"
                    },
                    "email": {
                      "type": "string",
                      "description": "Email address of the user"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid email or password"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/auth/isLoggedIn": {
      "get": {
        "summary": "Check if user is logged in",
        "description": "Logs in a user with the provided email and password.",
        "tags": ["Authentication"],
        "responses": {
          "200": {
            "description": "Login successful",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Success message"
                },
                "token": {
                  "type": "string",
                  "description": "JWT token for authentication"
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier of the user"
                    },
                    "firstName": {
                      "type": "string",
                      "description": "First name of the user"
                    },
                    "lastName": {
                      "type": "string",
                      "description": "Last name of the user"
                    },
                    "email": {
                      "type": "string",
                      "description": "Email address of the user"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid email or password"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "summary": "Register a new user",
        "description": "Registers a new user with the provided information.",
        "tags": ["Authentication"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "User registration details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "firstName": {
                  "type": "string",
                  "description": "First name of the user"
                },
                "lastName": {
                  "type": "string",
                  "description": "Last name of the user"
                },
                "email": {
                  "type": "string",
                  "description": "Email address of the user"
                },
                "password": {
                  "type": "string",
                  "description": "Password for the user account"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User registered successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Success message"
                },
                "token": {
                  "type": "string",
                  "description": "JWT token for authentication"
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier of the user"
                    },
                    "firstName": {
                      "type": "string",
                      "description": "First name of the user"
                    },
                    "lastName": {
                      "type": "string",
                      "description": "Last name of the user"
                    },
                    "email": {
                      "type": "string",
                      "description": "Email address of the user"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "User already exists with this email"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/projects/getall": {
      "get": {
        "summary": "Get projects for logged-in user",
        "description": "Returns a list of projects where the logged-in user is either an admin or a member.",
        "tags": ["Projects"],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Project"
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },

    "/api/projects": {
      "post": {
        "summary": "Create a new project",
        "description": "Creates a new project with the provided information.",
        "tags": ["Projects"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Project creation details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Title of the project"
                },
                "description": {
                  "type": "string",
                  "description": "Description of the project"
                },
                "startDate": {
                  "type": "string",
                  "format": "date",
                  "description": "Start date of the project (YYYY-MM-DD)"
                },
                "endDate": {
                  "type": "string",
                  "format": "date",
                  "description": "End date of the project (YYYY-MM-DD)"
                },
                "estimatedStoryPoints": {
                  "type": "number",
                  "description": "Estimated story points for the project"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Project created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Success message"
                },
                "project": {
                  "$ref": "#/definitions/Project"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/projects/{projectId}": {
      "put": {
        "summary": "Update a project by ID",
        "description": "Updates an existing project based on the provided ID",
        "tags": ["Projects"],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Updated project details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project updated successfully",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "403": {
            "description": "Access denied"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "get": {
        "summary": "Get a project by ID",
        "description": "Returns a project based on the provided ID",
        "tags": ["Projects"],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "404": {
            "description": "Project not found"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a project by ID",
        "description": "Deletes an existing project based on the provided ID",
        "tags": ["Projects"],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Project deleted successfully"
          },
          "403": {
            "description": "Access denied"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/projects/{projectId}/tasks": {
      "post": {
        "summary": "Create a task for a project",
        "description": "Creates a new task associated with a project.",
        "tags": ["Tasks"],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "description": "Task details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/TaskInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created successfully",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "403": {
            "description": "Access denied"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/projects/{projectId}/tasks/{taskId}": {
      "put": {
        "summary": "Update a task",
        "description": "Updates an existing task associated with a project.",
        "tags": ["Tasks"],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "type": "string"
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "ID of the task",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "description": "Updated task details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/TaskInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task updated successfully",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/categories": {
      "post": {
        "summary": "Create a category",
        "description": "Creates a new category.",
        "tags": ["Categories"],
        "requestBody": {
          "description": "Category details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/CategoryInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "400": {
            "description": "Category already exists"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "get": {
        "summary": "Get all categories",
        "description": "Returns a list of all categories.",
        "tags": ["Categories"],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Category"
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/categories/{categoryId}": {
      "put": {
        "summary": "Update a category",
        "description": "Updates an existing category.",
        "tags": ["Categories"],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of the category",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "description": "Updated category details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/CategoryInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category updated successfully",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "404": {
            "description": "Category not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a category",
        "description": "Deletes an existing category.",
        "tags": ["Categories"],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of the category",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Category deleted successfully"
          },
          "404": {
            "description": "Category not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    }
  },
  "definitions": {
    "Project": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "The unique identifier of the project"
        },
        "title": {
          "type": "string",
          "description": "The title of the project"
        },
        "description": {
          "type": "string",
          "description": "A brief description of the project"
        },
        "admins": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of user IDs who are admins of the project"
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of user IDs who are members of the project"
        }
      }
    },
    "TaskInput": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "assignedTo": {
          "type": "string"
        },
        "storyPoints": {
          "type": "number"
        }
      }
    },
    "Task": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "The unique identifier of the task"
        },
        "title": {
          "type": "string",
          "description": "The title of the task"
        },
        "description": {
          "type": "string",
          "description": "A brief description of the task"
        },
        "category": {
          "type": "string",
          "description": "The category of the task"
        },
        "assignedTo": {
          "type": "string",
          "description": "The user ID to whom the task is assigned"
        },
        "storyPoints": {
          "type": "number",
          "description": "The story points assigned to the task"
        }
      }
    },
    "CategoryInput": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "The unique identifier of the category"
        },
        "name": {
          "type": "string",
          "description": "The name of the category"
        }
      }
    }
  },
  "securityDefinitions": {
    "JWT": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization"
    }
  }
}
